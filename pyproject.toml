[project]
name = "bench-mac"
version = "0.1.0"
description = "A benchmark for evaluating AI agents on Angular version migration tasks."
readme = "README.md"
authors = [
    { name = "Samuel Mallet", email = "69467005+SuperMuel@users.noreply.github.com" },
]
requires-python = ">=3.12"
dependencies = [
    "cyclopts>=3.20.0",
    "docker>=7.1.0",
    "pydantic>=2.11.7",
    "requests>=2.32.4",
]

[project.urls]
Homepage = "https://github.com/SuperMuel/BenchMac"
Repository = "https://github.com/SuperMuel/BenchMac"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.0",
    "python-dotenv>=1.1.1",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "src/**/__init__.py", "scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "UP",     # pyupgrade
    "C4",     # flake8-comprehensions
    "B",      # flake8-bugbear
    "RUF",    # Ruff-specific rules
    "N",      # pep8-naming
    "SIM",    # flake8-simplify
    "PTH",    # flake8-use-pathlib
    "ANN001", # Checks that function arguments have type annotations.
    "ANN201", # Missing return type annotation for public function {name}
    "DTZ",

]

ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


# --- Per-File Ignores ---
[tool.ruff.lint.per-file-ignores]
# Allow unused imports in __init__.py files for exposing package APIs.
"**/__init__.py" = ["F401"]


"tests/*" = [
    "S101",   # Allow `assert` statements in tests.
    "ANN",    # Relax annotation requirements for test functions.
    "RUF012",
]


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]

markers = [
    "unit: fast, isolated tests",
    "integration: cross-component or external-resource tests",
    "e2e: end-to-end tests",
    "slow: slow tests",
]
addopts = [
    "--strict-markers",
    "-ra",                                      # extra summary
    "-m",
    "not integration and not e2e and not slow", # run only unit tests by default
]
